# Register FT4 accounts
In the FT4 library, accounts function as digital identities, enabling users to transfer assets, interact with dapps, and sign transactions. Account registration allows the system to securely identify and authenticate users, supporting access control mechanisms that let users or administrators define permissions for actions an account can perform. This approach is crucial for maintaining security, preventing unauthorized access, and ensuring that resources such as assets or data remain accessible only to the rightful owner.

Account registration framework
For most dapps, the account registration framework provided by the FT4 library is the recommended approach. This framework offers a flexible, secure, and scalable system for creating new accounts, supporting various strategies tailored to different business models and security requirements. The framework simplifies the developer experience, offering pre-built solutions for common registration scenarios.

Registration strategies
The account registration framework supports several strategies:

Open: Anyone can call the register_account() operation to create an account without restrictions.
Transfer strategy: Users must perform a transfer to the account address before creating an account. The transfer strategy includes three sub-strategies:
Open: Users can claim the entire deposit to their newly created account.
Fee: Part of the transferred assets is collected as a fee to the chain's fee account, allowing users to claim only the remaining assets.
Subscription: Similar to the fee strategy, but users need to periodically renew their subscription by paying the subscription fee to maintain account access.
To enable a specific strategy, import the corresponding module into the Rell file and configure it in the chromia.yml file. The modules are named as follows:

lib.ft4.core.accounts.strategies.open (open strategy)
lib.ft4.core.accounts.strategies.transfer.open (transfer open strategy)
lib.ft4.core.accounts.strategies.transfer.fee (transfer fee strategy)
lib.ft4.core.accounts.strategies.transfer.subscription (transfer subscription strategy)
Transfer strategy
To use any of the transfer strategies, certain moduleArgs must first be configured in the chromia.yml file under the key:

lib.ft4.core.accounts.strategies.transfer

Under this key, settings must be specified, including which chains are permitted to make transfers to the chain and which assets are accepted. Configuring these parameters helps prevent potential DOS attacks and spam from untrusted chains. Here is an example configuration:

lib.ft4.core.accounts.strategies.transfer:
  rules:
    - sender_blockchain: # List of blockchain rids from which we will accept transfers
      - x"08B02E0E14B634031FDF2ED3FD78E7410A5849CD28"
    sender: * # Anyone on the specified blockchain can send us assets
    recipient: * # They can send assets to anyone on this chain
    asset: # List of assets that can be sent from this chain
      - name: CHR # Name of the asset (id can also be used instead)
        min_amount: 5L # If transfer is of less than this value, then the transfer will be rejected
    timeout_days: 30 # After this many days, the sender is allowed to recall the transfer if it hasn't been claimed
    strategy: # List of transfer strategies to enable
      - "fee"
      - "open"


In this example, every user on a specified Chromia blockchain is allowed to send a minimum of 0.000005 CHR to any user on the receiving blockchain. If the transfer recipient does not have an existing account, they can create one using either the open or fee strategy. This configuration enables granular control over which blockchains can send assets and create accounts.

If only the open strategy is enabled, additional configurations are not required. However, the open strategy may not provide optimal spam protection, as it could allow the creation of numerous accounts with minimal assets. For enhanced protection, using an alternative strategy, such as the fee strategy, is recommended.

To configure the fee strategy, additional steps are required beyond the initial setup. First, import the strategy in the main module.rell file

import lib.ft4.accounts.strategies.transfer.fee;

Then, configure the strategy by specifying the valid asset(s) for payments, the fee amount, and the destination for the fee payment. This is done by adding a configuration under the moduleArgs key in the chromia.yml file:

lib.ft4.core.accounts.strategies.transfer.fee:
  asset:
    - id: x"b31ba66a11a28930d948c8f959cc306184096d1ee858542e765a139b3c79b1aa" # We can specify an asset by id
      amount: 2L # How much of this asset to pay
    - name: test1 # we can specify an asset by name, this will refer to an asset issued by this chain
      amount: 1L
    - issuing_blockchain_rid: x"6403ccac0c67f7cb6af78e5e15b3aaebb2b42370f0d12e099ed01fa5a068f9fb" # We can also specify assets issued by a different chain, even if the names are the same
      name: test1
      amount: 3L
  fee_account: x"023c72addb4fdf09af94f0c94d7fe92a386a7e70cf8a1d85916386bb2535c7b1b1" # All fees will be collected into this account


In the configuration above, users can pay the fee using one of three assets, with varying amounts depending on the asset. This flexibility can accommodate value differences between assets or encourage payment with a preferred asset. It is worth mentioning that the asset id cannot be accompanied by the name or issuing chain rid. Additionally, the account for fee collection is specified, which should typically be controlled by the dapp owner.

caution
The amount set for an asset must be lower than the min_amount specified for that asset. If the amount is set too high, users may accidentally send an insufficient amount, preventing account creation until the transfer timeout is reached. They would then need to recall and repeat the transfer with the correct amount.

For account registration using a transfer strategy, a transfer must first be made to the account. If the user already holds an account with enough assets, they may initiate the transfer themselves, or a friend might perform it on their behalf, functioning as an invitation system.

info
To see an example of account registration using the transfer open strategy, explore the Transfer open strategy account registration demo.

Register with FT4 admin operation
For scenarios requiring greater control or direct intervention, Chromia offers the FT4 admin operation. This admin-level operation allows authorized administrators to create accounts directly, bypassing the user-driven registration process.

Why Use the admin operation?
Admin operations are intended for cases requiring stricter control over account creation, such as when developers or dapp owners need to create accounts for system users, team members, or to initiate specific business processes. Unlike user-led registrations, admin operations can bypass certain checks and constraints, enabling direct management of the blockchain environment.

However, admin operations are not recommended for production environments, as they may introduce security risks if not carefully managed. If an admin operation is necessary, consider building a custom admin module tailored to the specific requirements of the dapp.

warning
Admin operations are enabled by importing the admin module and should not be used in production.

Admin vs. non-admin operations
Admin operations: These provide broader permissions and access, allowing administrators to perform tasks like account registration, asset management, or system updates. They are powerful but carry higher risks, as improper use can affect the security and stability of the entire system.
Non-admin operations: These are designed for end-users or automated processes with more restricted access. They follow strict rules, ensuring that users can only perform actions they are explicitly authorized to carry out (e.g., transferring assets or modifying their own account settings).
Registering an account with FT4 admin
The FT4 admin operation, ft4.admin.register_account, requires an auth descriptor as a parameter. An auth descriptor specifies who can access an account, what actions they can perform, and the lifetime of the auth descriptor. The access to an account is determined by a public key when FT authentication (native Chromia signatures) is used or an EVM account address when an EVM wallet is used for authentication.

The actions allowed by the auth descriptor are specified with authorization keys, and expiration rules determine the activation and validity duration of the auth descriptor. For more details, see the auth descriptor topic.

To create an account using the FT4 admin operation, follow these steps:

Generate a new key pair for the account and retrieve the public key:

chr keygen --file .chromia/user.keypair | grep pubkey

Register the account using the FT4 admin operation:

chr tx ft4.admin.register_account \
    '[0, [["A","T"], x"0351D4F299E3D33EC745C9F3C2F74934960F58411BE8BAE52A1E6EC8D0BA26AEDB"], null]' \
    --await --secret .chromia/ft4-admin.keypair


In this command:

0 represents a single signature auth descriptor.

A (account) and T (transfer) are auth flags defined in the FT library.

note
It's important to note that when calling FT account operations, such as ft4.add_auth_descriptor or ft4.delete_auth_descriptor, the authentication will fail unless the auth descriptor used has the A flag. Similarly, when calling the transfer operation, the transfer will be rejected if the auth descriptor doesn't have the T flag.

Replace 0351D4F299E3D33EC745C9F3C2F74934960F58411BE8BAE52A1E6EC8D0BA26AEDB with the generated public key for the user.

A query can be added that returns all accounts to verify if the account exists. Add the following query to your code:

query get_all_accounts() = accounts.account @* {} (.id);

Update and wait for the blockchain to reflect the changes:

chr node update

You can now execute the query to retrieve all accounts:

chr query get_all_accounts

The output will display the account ID(s), such as:

[x"5E2488889F72939DD4D0A034FB91893ACBF14C7EDBCEF2A9F5C621A07169EAD2"]

Register with a custom operation
If the provided account registration framework or admin operation does not meet specific requirements, a custom operation can be created to handle account registration. Writing a custom operation provides full control over the registration process, enabling customization according to unique requirements and security needs.

tip
When implementing a custom operation, it is advisable to follow best practices for secure coding, including code reviews and thorough testing, to maintain the integrity and reliability of the account registration process.

When registering an account with a custom operation, protecting the operation against potential spam attacks on the blockchain is essential. In this example, users are required to provide a voucher during registration. This approach involves creating a register and an admin operation to allow vouchers to be added.

Define the voucher entity and the add_voucher operation in your code:

entity voucher {
    hash: byte_array;
    mutable is_used: boolean = false;
}

operation add_voucher(hash: byte_array) {
    admin.require_admin();
    create voucher(hash);
}

Define the register_account operation, which includes voucher validation and account creation:

operation register_account(accounts.auth_descriptor, voucher_code: text) {
    // extract pubkey from auth descriptor
    val pubkey = byte_array.from_gtv(auth_descriptor.args[1]);

    // check if provided key is signer
    require(op_context.is_signer(pubkey), "Transaction needs to be signed by %s".format(pubkey));

    val hash = voucher_code.hash();
    val voucher = require(
        voucher @? { hash },
        "Provided voucher with code <%s> does not exist".format(voucher_code)
    );
    require(
        not voucher.is_used,
        "Provided voucher with code <%s> is already used".format(voucher_code)
    );
    voucher.is_used = true;
    accounts.create_account_with_auth(auth_descriptor);
}

After adding the code snippets to the appropriate sections in your main.rell file, update the blockchain to apply the changes.

Generate a voucher hash using the chr repl command as follows:

chr repl -c '"voucher_1".hash()'

The output will be a hash like:

x"E1E72D0C6C975815BD3259D81E67253D98CF90D888B4C7CB393C8CFB9043BAF3"

Add the voucher hash to the blockchain using the admin operation:

chr tx add_voucher \
  'x"E1E72D0C6C975815BD3259D81E67253D98CF90D888B4C7CB393C8CFB9043BAF3"' \
  --await --secret .chromia/ft4-admin.keypair

Generate a new keypair for the user who'll register the account, and retrieve the public key:

chr keygen --file .chromia/user-2.keypair | grep pubkey

Register the account using the custom operation register_account:

chr tx register_account \
  '[0, [["A", "T"], x"03772E03AE22835384164AA90E28C84F78C97D29A2635861DC3F7E32F0CC8FDF51"], null]' \
  voucher_1 \
  --await --secret .chromia/user-2.keypair


Replace 03772E03AE22835384164AA90E28C84F78C97D29A2635861DC3F7E32F0CC8FDF51 with the generated public key for the user.

To verify the successful account registration, execute the get_all_accounts query again. You should now see two account IDs or one if you didn't follow the first half of the guide:

chr query get_all_accounts

The output would include the account IDs:

[x"5E2488889F72939DD4D0A034FB91893ACBF14C7EDBCEF2A9F5C621A07169EAD2", x"79C71AF3C9C951BED380F8ADAB2E407C15CC4A9EB942AA222D870136C45801CE"]


# Open fee strategy
The open fee strategy allows users to create accounts and explore the dapp completely free of charge. This approach is ideal for:

Early-stage development: Gathering valuable feedback and building a user base during the initial testing phases.
Community building: Fostering a vibrant community by removing barriers to entry and encouraging participation.
Benefits of open fees:
Frictionless user acquisition: Attracts users quickly with a free and easy onboarding process.
Community growth: Encourages user interaction and helps build a strong community around the dapp.
Brand awareness: Increases brand recognition and awareness early on.
Important considerations:
Potential for abuse: Open access can be susceptible to spam or malicious activity. Implementing safeguards may be necessary at a later stage.
Limited for production: This strategy may not be suitable for long-term or secure operation.
The open fee model is the default setting in all dapps out of the box, so no additional configuration is required.

# Fixed fee strategy
In a fixed fee strategy, users pay a set fee for specific actions such as creating an account or making a transaction.

Key details:
Users pay a fixed amount (similar to a one-time purchase) using a specific token to access the dapp's features.
This approach provides a clear and easy-to-understand system, suitable for users who prefer straightforward access.
Simplifies the dapp's financial management and encourages brand loyalty among satisfied users.
Benefits of fixed fees:
Clarity: Users know exactly what they’re paying for, fostering trust and transparency.
Convenience: Eliminates the need for recurring payments, making it user-friendly.
Brand Loyalty: Encourages users to explore all features, potentially increasing engagement.
Getting started
A code example with tests is available here.

To begin, here is an example configuration:

lib.ft4.core.accounts.strategies.transfer:
  rules:
    - sender_blockchain: x"0000000000000000000000000000000000000000000000000000000000000000"
    sender: "*"
    recipient: "*"
    asset:
        - name: "MyTestAsset"
        min_amount: 100L
    timeout_days: 60
    strategy:
    - "fee"
lib.core.accounts.strategies.transfer.fee:
  asset:
    - name: "MyTestAsset" # issued by current blockchain
    amount: 40L


This configuration includes two main settings: strategies.transfer and strategies.transfer.fee. In the example above:

Transfer Strategy: For any user to any recipient from any blockchain using the MyTestAsset asset with a minimum amount of 100 coins, a fixed fee can be requested. The timeout is 60 days.
Fee Strategy: The fee is set at 40 MyTestAsset coins.
tip
A clear and straightforward fee structure is essential. Transparency ensures users know exactly what they’re paying for.

```rell
@test module;

import lib.ft4.assets. { get_asset_balance };
import lib.ft4.core.accounts.strategies.transfer.{ get_pending_transfer_strategies, has_pending_create_account_transfer_for_strategy };
import lib.ft4.core.accounts.strategies.transfer.subscription.{ ras_transfer_subscription, get_subscription_details, renew_subscription };
import lib.ft4.external.accounts.strategies.{ register_account };
import lib.ft4.test.utils. { create_auth_descriptor, ft_auth_operation_for };
import ^^.subscription.{ create_user_mint_tokens, transfer_tokens, get_last_account, dapp_meta, get_account_by_id };


function test_main() {
    // Create test users keypairs
    val alice = rell.test.keypairs.alice;
    val trudy = rell.test.keypairs.trudy;

    // Create account for Alice and mint 1000 tokens on this account
    rell.test.tx()
        .op(create_user_mint_tokens(alice.pub)).sign(alice)
        .run();

    var alice_account = get_last_account();

    // Transfer assets to a non-existent account
    rell.test.tx()
        .op(transfer_tokens(alice_account, trudy.pub.hash(), dapp_meta.asset, 100L))
        .run();

    // Check if any pending transfer strategies 
    val strategies_names = get_pending_transfer_strategies(trudy.pub.hash());
    // RESULT: [subscription]

    // Checks if there is at least one pending transfer for account creation based on a subscription strategy.
    val pending_create_account_status = has_pending_create_account_transfer_for_strategy(
        strategy_name = dapp_meta.strategy_name,  
        sender_blockchain_rid = dapp_meta.sender_blockchain_rid,
        sender_id = alice_account.id,
        recipient_id = trudy.pub.hash(),
        asset_id = dapp_meta.asset.id,
        amount = 100L
    );
    // RESULT: true

    // Create auth descriptor; Use subscription operation to pass account details to the register_account function. Is because we have better type checking and malformed (GTV encoded) parameters will be detected by Rell even before operation is invoked; And now register account
    val auth_descriptor = create_auth_descriptor(trudy.pub, ["A", "T"], null.to_gtv());
    rell.test.tx()
        .op(ras_transfer_subscription(dapp_meta.asset.id, auth_descriptor, null))
        .op(register_account()).sign(trudy)
        .run();

    // Checking if a subscription exists and its details
    var subscription_details = get_subscription_details(trudy.pub.hash());
    // RESULT: (asset_id=0x608dccb513eb2229056e41d7511a1984087cbabafb5bab23c19a307e60a93e86,period_millis=2592000000,last_payment=1577836810000)

    // Check balance 
    val trudy_account = get_account_by_id(trudy.pub.hash());
    var trudy_balance = get_asset_balance(trudy_account, dapp_meta.asset);
    // RESULT: 90

    // Renew subscription
    rell.test.tx()
        .op(ft_auth_operation_for(trudy.pub))
        .op(renew_subscription(dapp_meta.asset.id)).sign(trudy)
        .run();
    
    // Check balance 
    trudy_balance = get_asset_balance(trudy_account, dapp_meta.asset);
    // RESULT: 80

    // Check last paymeyment again
    subscription_details = get_subscription_details(trudy.pub.hash());
    // RESULT: (asset_id=0x608dccb513eb2229056e41d7511a1984087cbabafb5bab23c19a307e60a93e86,period_millis=5183990000,last_payment=1577836820000)
}
```

# Subscription fee strategy
The subscription fee strategy allows a dapp to implement a recurring payment model.

Two ways to implement subscriptions:
Automatic activation: Users transfer a set amount of a specified token upon registering. If the transferred amount meets the minimum requirement, their account is created with the subscription active.
Self-serve activation: Users with existing tokens on another chain can transfer the subscription fee directly.
Benefits of subscriptions:
Recurring revenue: Provides a predictable income stream to support dapp sustainability.
Easy setup: Simple implementation offers clear advantages to users.
Getting started
A code example with tests is available here.

To begin, expand the app configuration as shown below.

lib.ft4.core.accounts.strategies.transfer:
  rules:
    - sender_blockchain: x"0000000000000000000000000000000000000000000000000000000000000000"
      sender: "*"
      recipient: "*"
      asset:
        - name: "MyTestAsset"
        min_amount: 100L
      timeout_days: 60
      strategy:
      - "subscription"
lib.ft4.core.accounts.strategies.transfer.subscription:
  asset:
    - name: "MyTestAsset" # issued by current blockchain # OR id: x"C633343E4AA3213EA92158648F11BA8DFF606C6CAC80614CFA5F45E57367F823"
    amount: 10L
  subscription_period_days: 30
  free_operations:
    - some_free_operation


This configuration includes two main settings, strategies.transfer and strategies.transfer.subscription. The example above specifies the following:

Transfer strategy: For any sender and recipient on any blockchain, transactions involving the "MyTestAsset" asset with a minimum amount of 100 coins can request a subscription. The timeout period is set to 60 days.
Subscription strategy: The subscription price is set at 10 "MyTestAsset" coins for a 30-day period. Users may perform some_free_operation even without an active subscription.

```rell
@test module;

import lib.ft4.assets. { get_asset_balance };
import lib.ft4.core.accounts.strategies.transfer.{ get_pending_transfer_strategies, has_pending_create_account_transfer_for_strategy };
import lib.ft4.core.accounts.strategies.transfer.subscription.{ ras_transfer_subscription, get_subscription_details, renew_subscription };
import lib.ft4.external.accounts.strategies.{ register_account };
import lib.ft4.test.utils. { create_auth_descriptor, ft_auth_operation_for };
import ^^.subscription.{ create_user_mint_tokens, transfer_tokens, get_last_account, dapp_meta, get_account_by_id };


function test_main() {
    // Create test users keypairs
    val alice = rell.test.keypairs.alice;
    val trudy = rell.test.keypairs.trudy;

    // Create account for Alice and mint 1000 tokens on this account
    rell.test.tx()
        .op(create_user_mint_tokens(alice.pub)).sign(alice)
        .run();

    var alice_account = get_last_account();

    // Transfer assets to a non-existent account
    rell.test.tx()
        .op(transfer_tokens(alice_account, trudy.pub.hash(), dapp_meta.asset, 100L))
        .run();

    // Check if any pending transfer strategies 
    val strategies_names = get_pending_transfer_strategies(trudy.pub.hash());
    // RESULT: [subscription]

    // Checks if there is at least one pending transfer for account creation based on a subscription strategy.
    val pending_create_account_status = has_pending_create_account_transfer_for_strategy(
        strategy_name = dapp_meta.strategy_name,  
        sender_blockchain_rid = dapp_meta.sender_blockchain_rid,
        sender_id = alice_account.id,
        recipient_id = trudy.pub.hash(),
        asset_id = dapp_meta.asset.id,
        amount = 100L
    );
    // RESULT: true

    // Create auth descriptor; Use subscription operation to pass account details to the register_account function. Is because we have better type checking and malformed (GTV encoded) parameters will be detected by Rell even before operation is invoked; And now register account
    val auth_descriptor = create_auth_descriptor(trudy.pub, ["A", "T"], null.to_gtv());
    rell.test.tx()
        .op(ras_transfer_subscription(dapp_meta.asset.id, auth_descriptor, null))
        .op(register_account()).sign(trudy)
        .run();

    // Checking if a subscription exists and its details
    var subscription_details = get_subscription_details(trudy.pub.hash());
    // RESULT: (asset_id=0x608dccb513eb2229056e41d7511a1984087cbabafb5bab23c19a307e60a93e86,period_millis=2592000000,last_payment=1577836810000)

    // Check balance 
    val trudy_account = get_account_by_id(trudy.pub.hash());
    var trudy_balance = get_asset_balance(trudy_account, dapp_meta.asset);
    // RESULT: 90

    // Renew subscription
    rell.test.tx()
        .op(ft_auth_operation_for(trudy.pub))
        .op(renew_subscription(dapp_meta.asset.id)).sign(trudy)
        .run();
    
    // Check balance 
    trudy_balance = get_asset_balance(trudy_account, dapp_meta.asset);
    // RESULT: 80

    // Check last paymeyment again
    subscription_details = get_subscription_details(trudy.pub.hash());
    // RESULT: (asset_id=0x608dccb513eb2229056e41d7511a1984087cbabafb5bab23c19a307e60a93e86,period_millis=5183990000,last_payment=1577836820000)
}
```

# Use auth descriptors for accounts
Accounts can have multiple account descriptors connected to them. Each can be made to serve a different purpose, but the most important one is the main auth descriptor.

The auth descriptor itself is a simple struct:

struct auth_descriptor {
    auth_type;
    args: list<gtv>;
    rules: gtv;
}

The struct is then connected to the account using the account_auth_descriptor entity.

entity account_auth_descriptor {
    /** a unique identifier for the auth descriptor */
    id: byte_array;
    /** the account it allows access to */
    key account, id;
    index id;
    /** whether it's single-sig or multi-sig. It will influence the `args` property. */
    auth_type;
    /**
     * It specifies signers and level of access for the auth descriptor.
     * It should be either of the following structs, encoded into a byte array:
     * - `single_sig_args`, if `auth_type` is `S`
     * - `multi_sig_args`, if `auth_type` is `M`
     */
    args: byte_array;
    /**
     * Must be one of these values, converted to gtv and then encoded into a byte array:
     * - **no rules**: `null` (when encoded, it will be converted to `GTV_NULL_BYTES`)
     * - **a simple rule**: a `rule_expression`
     * - **a complex rule**: a list starting with the value `"and"` and followed by
     *   `rule_expression`s
     *
     * The amount of rule expressions should always be less than or equal to
     * `auth_descriptor_config.max_rules`.
     *
     * After the expiration conditions are reached, this auth descriptor
     * will automatically be deleted as soon as the account that owns it sends an
     * operation.
     *
     * Must be `GTV_NULL_BYTES` if this is the `main_auth_descriptor` for the account.
     *
     * @see `rule_expression` explains what it means to expire
     */
    rules: byte_array;
    /**
     * Used for the `op_count` expiration rule, counts how many operations this auth
     * descriptor has authenticated.
     */
    mutable ctr: integer;
    /** When was this auth descriptor registered */
    created: timestamp;
}

See the auth descriptor section for more information on auth descriptors.

Main auth descriptor
Each account has a main account auth descriptor which is set during account creation. The main account descriptor can only be substituted, it can't be deleted.

entity main_auth_descriptor {
    /** the account of which this auth descriptor is the manager of */
    key account;
    /** the auth descriptor that manages the account */
    key auth_descriptor: account_auth_descriptor;
}

The main auth descriptor can be updated to another one using the update_main_auth_descriptor function, which can only be called from an operation.

function update_main_auth_descriptor(account, auth_descriptor)

The main auth descriptor cannot be bound by any rules, meaning it's always valid until replaced. As other descriptors it needs to have manadatory flags set before the update. The previous main auth descriptor is always deleted during the update, and the new one is set as the main auth descriptor if none of the checks above fail.

Adding other auth descriptors
As the update_main_auth_descriptor function, the add_auth_descriptor function can only be called from an operation.

function add_auth_descriptor(account, auth_descriptor): account_auth_descriptor


There is also an operation ready to be used with the same name. The only argument it has is the account auth descriptor which is then used in the function call above:

operation add_auth_descriptor(new_desc: accounts.auth_descriptor)

The checks which are performed are:

check if the number of maximum configured auth descriptors has been exceeded
check if the auth descriptor args correspond to single_sig_args or multi_sig_args, which is a set of required flags and number of signers in case of multi_sig_args
check auth descriptor rules (to see if the auth descriptor is initially valid)
If the checks pass, the account_auth_descriptor will be created, and the signer(s) will be associated with the account by calling add_signers which will create an auth_descriptor_signer entity.

entity auth_descriptor_signer {
    /** Either the pubkey or, for EVM signers, the EVM address (without `0x`) */
    id: byte_array;
    /** the auth descriptor this signer can access */
    key account_auth_descriptor, id;
}

note
If the signer is using an EVM wallet like MetaMask, only store the EVM address without the leading 0x here.

Creating an account with an auth descriptor
The most typical way of creating a new account is by calling create_account_with_auth which takes a before-created auth descriptor and optionally an id for the account.

function create_account_with_auth(auth_descriptor, account_id: byte_array? = null): account

As is the case with updating the main_auth_descriptor, during account creation, the auth descriptor needs to be without any rules and have mandatory flags. If those 2 checks are passed, the account is created.

note
If native Postchain pubkeys are used, the account_id will be hash(pubkey). In case EVM pubkeys are used, the account_id will be hash(evm_address).

After the id is derived and the account created, the auth descriptor is added as the main auth descriptor. Finally, the rate limiter state (rl_state) is created for the account, which is set from default values configured on the chain.

# Link FT4 accounts
The account_link entity is a versatile structure designed to represent a relationship between two accounts. This entity can be customized for various purposes by developers, enabling the management of complex account interactions such as staking, locking, or auction-related transactions.

Overview
The account_link can be leveraged in scenarios where assets are held temporarily in a non-user-controlled account, or in cases where accounts must be linked for internal management or governance reasons. This flexibility allows developers to implement custom workflows and control mechanisms that support both user-controlled and system-controlled accounts.

Structure
Entity definition: account_link
The entity's structure allows it to store essential details of the relationship between accounts. Here’s an outline of the fields and their purposes:

Primary account (accounts.account): Represents the main or initiating account in the relationship. Typically, this is a user account.
Secondary account (secondary: accounts.account): The target or secondary account in the relationship, often a non-user-controlled account used for specific purposes.
Relationship type (type: text): A description of the relationship, specified as text. Common examples include terms like "stake" or "bid".
Indices
Primary key: (account, secondary) — Uniquely identifies the link between a specific primary and secondary account.
Secondary index: (secondary, type) — Facilitates efficient querying based on the secondary account and relationship type.
Usage scenarios
This entity is intended for scenarios where temporary control of assets or relationships between accounts is needed, especially when assets should be beyond the immediate control of the primary user account. Here are some typical use cases:

Lock accounts:
Lock accounts allow assets to be held temporarily, with users having limited or no access.
Example: Staking tokens in a contract that prevents immediate withdrawal, using a custom lock account type defined as ACCOUNT_TYPE_LOCK.
Bidding and auction:
Bids in auctions often require assets to be held by the system to prevent immediate access by the bidder.
Example: An auction system where bid amounts are locked until the auction concludes, utilizing a system-controlled secondary account.
System-controlled accounts:
Many types of operations require system-level accounts to hold assets on behalf of users, without allowing users to reclaim them freely.
Example: A service or governance system managing assets with specific rules for accessibility or control.
Custom non-user account types:
Developers can define accounts that users may only control under certain conditions or with specific permissions.
Example: An escrow account controlled by a smart contract, where a user may release funds only after predefined conditions are met.
Implementation notes
Customizability: The account_link entity is deliberately flexible. It allows any relationship type to be defined based on the application’s needs.
Security and access control: Since non-user accounts can hold assets beyond a user's immediate reach, implementing secure access and control mechanisms is recommended for any application that leverages this entity.
On-chain transparency: By storing the relationship on-chain, applications using this entity can audit account links, ensuring transparency and accountability in asset management and user interactions.
Related modules
Locking and account types
core.assets.locking: Provides examples of lock accounts, including details on how assets can be secured in non-user accounts.
core.accounts.account.type: Offers more information on custom account types and their potential use in creating accounts with limited user control.
Example definition
entity account_link {
    key account, secondary;
    index secondary, type;

    // Primary account in the relationship, typically a user account.
    accounts.account;

    // Secondary account, often a system or non-user account.
    secondary: accounts.account;

    // Describes the type of relationship, e.g., "stake", "bid".
    type: text;
}

